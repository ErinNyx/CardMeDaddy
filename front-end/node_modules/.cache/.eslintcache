[{"/home/erin/WebstormProjects/CardMe/front-end/src/index.js":"1","/home/erin/WebstormProjects/CardMe/front-end/src/App.js":"2","/home/erin/WebstormProjects/CardMe/front-end/src/reportWebVitals.js":"3","/home/erin/WebstormProjects/CardMe/front-end/src/components/Homepage/index.js":"4","/home/erin/WebstormProjects/CardMe/front-end/src/components/Navbar/index.js":"5","/home/erin/WebstormProjects/CardMe/front-end/src/components/Create Game/index.js":"6","/home/erin/WebstormProjects/CardMe/front-end/src/components/Game/index.js":"7","/home/erin/WebstormProjects/CardMe/front-end/src/components/Modal/index.js":"8","/home/erin/WebstormProjects/CardMe/front-end/src/components/Join Game/index.js":"9"},{"size":677,"mtime":1678325464992,"results":"10","hashOfConfig":"11"},{"size":841,"mtime":1679322970725,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":1678143955839,"results":"13","hashOfConfig":"11"},{"size":1191,"mtime":1679362979082,"results":"14","hashOfConfig":"11"},{"size":2406,"mtime":1679362979086,"results":"15","hashOfConfig":"11"},{"size":6475,"mtime":1679362979090,"results":"16","hashOfConfig":"11"},{"size":11168,"mtime":1679365431437,"results":"17","hashOfConfig":"11"},{"size":527,"mtime":1679321863196,"results":"18","hashOfConfig":"11"},{"size":2325,"mtime":1679362979090,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"qknta8",{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/erin/WebstormProjects/CardMe/front-end/src/index.js",[],[],"/home/erin/WebstormProjects/CardMe/front-end/src/App.js",[],[],"/home/erin/WebstormProjects/CardMe/front-end/src/reportWebVitals.js",[],[],"/home/erin/WebstormProjects/CardMe/front-end/src/components/Homepage/index.js",[],[],"/home/erin/WebstormProjects/CardMe/front-end/src/components/Navbar/index.js",["51","52"],[],"import './index.scss';\nimport {Link, NavLink, useNavigate} from \"react-router-dom\";\nimport { useEffect, useState } from \"react\";\nimport { io } from \"socket.io-client\";\n\nconst socket = io();\nsocket.on('alert', (msg) => {\n    alert(msg);\n});\n\n\nconst Navbar = () => {\n\n    const [username, setUsername] = useState('Change Name');\n\n    useEffect( () => {\n        (async () => {\n            localStorage.setItem('loading', true);\n            const getData = await fetch('/api/get-data', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    id: localStorage.getItem('id')\n                })\n            }).then((res) => res.json());\n\n            localStorage.setItem('id', getData.id);\n\n            socket.emit('online', {\n                username: getData.username,\n                id: getData.id\n            });\n            localStorage.setItem('loading', false);\n            window.dispatchEvent(new Event('storage'));\n            setUsername(getData.username);\n        })();\n    }, []);\n\n    return (\n        <section id={'nav'}>\n            <NavLink to={'/'} id={'logo'}>\n                Card Me Daddy\n            </NavLink>\n            <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css\" />\n            <script async\n                    src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-8154425255494501\"\n                    crossOrigin=\"anonymous\"></script>\n            <NavLink to={'https://ko-fi.com/erinargo'} target=\"_blank\" rel=\"noopener noreferrer\"><i className=\"fa fa-coffee\" id={ 'coffee' } aria-hidden=\"true\" /></NavLink>\n\n            <form className={'change-name'} onSubmit={ (e) => {\n                e.preventDefault();\n                const username = document.getElementById('username').value;\n                if(!username) return;\n\n                setUsername(username);\n                socket.emit('change-username', { id: localStorage.getItem('id'), username });\n                document.getElementById('username').value = '';\n            }}>\n                <input type={'text'} placeholder={ username } id={ 'username' } />\n                <input type={'submit'} value={'Change Name'}/>\n            </form>\n        </section>\n    );\n};\n\nexport default Navbar;","/home/erin/WebstormProjects/CardMe/front-end/src/components/Create Game/index.js",["53","54","55","56","57","58","59"],[],"import './index.scss';\nimport Navbar from '../Navbar';\nimport { io } from 'socket.io-client';\nimport { useState, useEffect } from \"react\";\nimport {NavLink} from \"react-router-dom\";\n\nvar calls = 0, responses = 0;\n\nconst socket = io();\nsocket.on('alert', (msg) => {\n    alert(msg);\n});\n\nsocket.on('cards', (data) => {\n    calls = data.calls;\n    responses = data.responses;\n});\n\nsocket.on('redirect', (link) => {\n    window.location.href = link;\n});\n\nconst Create = () => {\n    document.addEventListener('keyup', (e) => {\n        e.preventDefault();\n        if (e.key === 'ENTER') crHandler(e);\n    });\n\n    const init = (\n        <div>\n            Loading . . .\n        </div>\n    );\n\n    const modalInit = (\n        <></>\n    );\n\n    const crInit = (\n        <>\n            <title>Card Me Daddy | Create a Game</title>\n            <form className={'settings'} onSubmit={(e) => e.preventDefault()}>\n                <label name={ 'blank' }><input type={ 'checkbox' }/>Add Blank Cards?</label>\n                <label name={ 'rounds' }>Enter number of rounds: <input type={'number'} placeholder={'10'} /></label>\n            </form>\n            <a className={ 'cr-add' }>\n                <input type={ 'text' } placeholder={'Custom CR Cast decks can be added with the deck code'} id={ 'cr-cast-input' } />\n                <input type={'submit'} onClick={ (e) => crHandler(e) } value={ 'Add CR Cast Deck' } id={ 'cr-cast-submit' } />\n            </a>\n            <h3>Added CR Packs</h3>\n        </>\n    );\n\n    const [packs, setPacks] = useState(init);\n    let [crPacks, setCR] = useState(crInit);\n\n    let [modal, setModal] = useState(modalInit);\n\n    async function crHandler(e) {\n        e.preventDefault();\n        var id = document.getElementById('cr-cast-input').value;\n        if(!id) return alert('Please enter a CR Cast ID');\n\n        const pack = await fetch('/api/cr-cast', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                deck: id\n            })\n        }).then((res) => res.json());\n\n        if(pack.error > 1) return alert('Invalid pack, please check that you entered the right code.');\n\n        const packID = ( <label className={ 'pack-container' }>\n            <input type={ 'checkbox' } className={'cr'} value={ id } checked={true} onClick={(e) => {\n            e.target.checked ? e.target.checked = false : e.target.checked = true;\n        } } /> { pack.name }: { pack.description } </label>);\n        const add = (\n            <>\n                { crPacks }\n                { packID }\n            </>\n        );\n\n        crPacks = add;\n\n        setCR(add);\n    }\n\n    useEffect(() => {\n        (async () => {\n            const getPacks = await fetch('https://www.restagainsthumanity.com/api/v2/packs', {\n                method: 'GET'\n            }).then((res) => res.json());\n\n            setPacks(\n                (\n                    <div className={ 'column-wrapper' }>\n                        <p id={ 'pre-title' }>Premade Packs</p>\n                        <div id={ 'base-packs' }>\n                            { getPacks.map((p) => (\n                                    <label className={ 'pack-container' }>\n                                        <input type={ 'checkbox' } className={'cah'} value={ p.split(\" \").join(\"%20\").trim() } />\n                                        { p }\n                                    </label>\n                                )\n                            )}\n                        </div>\n                    </div>\n                )\n            );\n        })();\n    });\n\n    return (\n        <>\n            <Navbar />\n            <script async\n                    src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-8154425255494501\"\n                    crossOrigin=\"anonymous\"></script>\n\n            <div className={ 'main' }>\n                <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\" />\n\n                <form id={ 'game-create' }>\n                    <div className={ 'row-wrapper' }>\n                        { packs }\n                        <div className={ 'column-wrapper' } id={ 'cr-cast-div' }>\n                            <h1> CR Cast <i className={ 'fa fa-question-circle' }>\n                                <p className={ 'hide-tip' }>CR Cast is a custom deck builder for cards against humanity. To import your deck, please copy the deck code (the url will not work) and\n                                paste into the field. <NavLink to={'https://cast.clrtd.com/'}>Visit CR Cast to make your deck today!</NavLink></p>\n                            </i></h1>\n                            { crPacks }\n                        </div>\n                    </div>\n\n                    <div id={ 'create-game-top' }>\n                        <input type={'text'} placeholder={ 'Password, if left blank game will be public' } id={ 'pass' } />\n                        <input type={ 'submit' } value={ 'Start Game!' } onClick={ async (e) => {\n                            e.preventDefault();\n\n                            const cah = [], cr =[], settings = [], password = document.getElementById('pass').value\n                                ? document.getElementById('pass').value : false;\n                            let set = document.querySelectorAll('.settings label input');\n\n                            settings.push(set[0].checked);\n                            settings.push(set[1].value);\n\n                            document.querySelectorAll('.cah').forEach((d) => {\n                                if(d.checked == true) cah.push(d.value);\n                            });\n\n                            document.querySelectorAll('.cr').forEach((d) => {\n                                if(d.checked == true) cr.push(d.value);\n                            });\n\n                            socket.emit('start-game',\n                                {\n                                    id: localStorage.getItem('id'),\n                                    cah,\n                                    cr,\n                                    settings,\n                                    password\n                                })\n                        }\n                        } />\n                    </div>\n                </form>\n            </div>\n        </>\n    );\n}\n\nexport default Create;","/home/erin/WebstormProjects/CardMe/front-end/src/components/Game/index.js",["60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77"],[],"import './index.scss';\nimport Navbar from '../Navbar';\nimport { io } from 'socket.io-client';\nimport {useState, useEffect, useRef} from \"react\";\nimport {NavLink} from \"react-router-dom\";\n\nvar selected;\n\nconst socket = io();\nsocket.on('alert', (msg) => {\n    alert(msg);\n});\n\nsocket.on('redirect', (link) => {\n    window.location.href = link;\n});\n\nsocket.on('add-player', () => {});\nsocket.on('store', (data) => localStorage.setItem(data.key, data.token));\n\nsocket.on('selections', (data) => {\n    selected = data;\n});\n\nsocket.on('remove-response', () => {\n    selected = undefined;\n\n    document.querySelectorAll('.checked').forEach((c) => {\n        c.childNodes[1].checked = false;\n        c.target.parentElement.style.background = '';\n        c.classList.remove('.checked');\n        c.parentElement.value = undefined;\n    })\n})\n\nconst Game = () => {\n    const init = (\n        <>\n            Loading . . .\n        </>\n    );\n\n    const [game, setGame] = useState(init);\n\n    const kickPlayer = (p, user) => {\n        socket.emit('kick', { p, user });\n    }\n\n    useEffect(() => {\n        (async () => {\n            const gameID = window.location.href.split('/');\n            const user = localStorage.getItem('id');\n            socket.emit('game-connection', ({ game: gameID[gameID.length - 1] }));\n\n            const game = await fetch('/api/game-info', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    game: gameID[gameID.length - 1],\n                    player: user\n                })\n            }).then((res) => res.json());\n\n            if(game.status) return alert(game.msg);\n\n            const host = game.host == localStorage.getItem('id') ? <button onClick={() => socket.emit('launch-game', {\n                    code: game.code,\n                    user\n                })\n            }>Start!</button> :\n                <></>;\n\n            const page = game.started ? (\n                <>\n                    <div className={'wrapper-top'}>\n                        <div className={ 'xar' }><a className={'daddy'}>Daddy:</a> { game.czarName }</div>\n                        { game.host == user ? (<a className={ 'end' } onClick={ async () => {\n                            const end = prompt('If you really want to end your game, type END');\n\n                            socket.emit('end', { end, user });\n                        } }>End Game</a>) : (<a className={ 'end' } onClick={ async () => {\n                            const end = prompt('If you really want to leave your game, type END');\n\n                            socket.emit('end', { end, user });\n                        } }>Leave Game</a>) }\n                        <div className={ 'call' } className={'black-card'}>{ <p> { game.cards.calls[0].text.split(\"_\").join(\"＿＿\") } </p> } {\n                            <p className={'pick'}>Pick: { game.cards.calls[0].pick }</p>\n                        }</div>\n                        <a className={'confirm'} onClick={ async () => {\n                            let selected = [];\n\n                            if(game.czar == user && game.picking) {\n                                return socket.emit('round-winner', { winner: document.querySelectorAll('.selected .checked')[0].attributes.name.value, user });\n                            }\n                            let blanks = 0;\n\n                            document.querySelectorAll('.checked div').forEach(c => {\n                                var text = c.innerHTML == '_' ? prompt('Enter your text for card #'+ (c.parentElement.value + 1)) : c.innerHTML;\n                                if(c.innerHTML == '_' && !text) return;\n\n                                if(c.innerHTML == '_') blanks++;\n\n                                c.checked = false;\n                                c.classList.remove('checked');\n                                c.background = '';\n\n                                if(c.parentElement.value == undefined) {\n                                    selected = [];\n                                    return;\n                                }\n\n                                const card = {\n                                    order: c.parentElement.value,\n                                    text\n                                }\n\n                                selected.push(card);\n\n                                c.parentElement.value = undefined;\n                            });\n\n                            socket.emit('confirm-selection', { selected, user, blanks });\n                            selected = [];\n                        } }>Confirm Selection</a>\n\n                        <div className={'selected'}>\n                            { selected ? selected.selections.map((s) => (\n                                <label className={ 'white-card' } name={ s.id }>{ s.selected.map((c, i) => <>Card { i+1 }: { c.text }<input type={'checkbox'} onChange={ (e) => {\n                                    e.target.checked ?\n                                        e.target.parentElement.style.background = '#ff8352'\n                                        : e.target.parentElement.style.background = '';\n\n                                const checked = document.querySelectorAll('.checked');\n                                if(checked.length >= game.cards.calls[0].pick) {\n                                    document.querySelectorAll('.checked')[0]\n                                        .style.background = '';\n                                    document.querySelectorAll('.checked input')[0].checked = false;\n                                    document.querySelectorAll('.checked div')[0].parentElement.value = undefined;\n                                    document.querySelectorAll('.checked')[0].classList.remove('checked');\n                                }\n\n                                e.target.checked ? e.target.parentElement.value = undefined : e.target.parentElement.value = checked.length;\n\n                                e.target.checked ?\n                                    e.target.parentElement.classList.add('checked') :\n                                    e.target.parentElement.classList.remove('checked');\n                            } } /></>) }</label>)) : (<></>) }\n                        </div>\n\n                        <div className={ 'responses' }>\n                            {\n                            game.players\n                                .map((p) => (\n                                    p.id == user ? (<>{\n                                        p.hand\n                                        .map((r) => (<label className={'white-card'}><div>{ r.text }</div><input type={'checkbox'} onChange={ (e) => {\n                                            e.target.checked ?\n                                                e.target.parentElement.style.background = '#ff8352'\n                                                : e.target.parentElement.style.background = '';\n\n                                            const checked = document.querySelectorAll('.checked');\n                                            if(checked.length >= game.cards.calls[0].pick) {\n                                                document.querySelectorAll('.checked')[0]\n                                                    .style.background = '';\n                                                document.querySelectorAll('.checked input')[0].checked = false;\n                                                document.querySelectorAll('.checked div')[0].parentElement.value = undefined;\n                                                document.querySelectorAll('.checked')[0].classList.remove('checked');\n                                            }\n\n                                            e.target.parentElement.value ? e.target.parentElement.value = undefined : e.target.parentElement.value = checked.length;\n\n                                            e.target.checked ?\n                                                e.target.parentElement.classList.add('checked') :\n                                                e.target.parentElement.classList.remove('checked');\n                                        } } /></label>))\n                                    }</>) : (<></>)\n                                ))\n                        }</div>\n                    </div>\n                    <div className={'wrapper-bottom'}>\n                        <div className={ 'chat' }>\n                            <div className={'chat-box'}>\n                                <div>\n                                    {\n                                        game.messages.map((m) =>\n                                            (<div><p>\n                                                { game.players.filter((p) => p.id == m.user)[0].username }\n                                            </p>\n                                                <p> { m.msg } </p>\n                                            </div>)) }</div>\n                            </div>\n                            <form onSubmit={(e) => {\n                                e.preventDefault();\n                                const msg = document.getElementById('chat').value;\n                                const parseCode = window.location.href.split('/');\n                                socket.emit('chat', { msg, game: parseCode[parseCode.length - 1], user: localStorage.getItem('id') });\n                            }\n                            }>\n                                <input type={'text'} placeholder={'Chat'} id={'chat'} />\n                            </form>\n                        </div>\n                        <div className={ 'points' }>\n                            <p>Points:</p>\n                            { game.players.map((p) => (<><> { game.host == user ? <a className={ 'kick' } onClick={() => { kickPlayer(p.id, user) } }>Kick Player</a> : <></> } </>{ p.username }: { p.points }<br /></>)) }\n                        </div>\n                        <div className={ 'hand' }>\n\n                        </div>\n                    </div>\n                </>\n            ) : (\n                <>\n                    <div className={ 'row-wrapper' } id={ 'pregame-screen' }>\n                        Join Game Code: { game.code }<br /><br />\n                        Waiting on players . . . <br />\n                        {\n                            game.players\n                                .map((p) => (<> { p.username } </>))\n                                .reduce((prev, curr) => [prev, ', ', curr])\n                        }\n                    </div>\n                    { host }\n                </>\n            );\n\n            setGame(page);\n        })();\n    })\n\n    return (\n        <>\n            <Navbar />\n            <script async\n                    src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-8154425255494501\"\n                    crossOrigin=\"anonymous\"></script>\n\n            { game }\n        </>\n    );\n}\n\nexport default Game;","/home/erin/WebstormProjects/CardMe/front-end/src/components/Modal/index.js",["78","79","80"],[],"import './index.scss';\n\nvar text;\nconst Modal = ({ data }) => {\n    return (\n        <div className={ 'modal-bg' }>\n            <div className={ 'modal' }>\n                <p> { data } </p>\n                <span>\n                    <a onClick={ () => {\n                        return true;\n                    } }>Okay</a>\n                    <a onClick={ () => {\n                        return false;\n                    } }>Cancel</a>\n                </span>\n            </div>\n        </div>\n    );\n}\n\nexport default Modal;","/home/erin/WebstormProjects/CardMe/front-end/src/components/Join Game/index.js",[],[],{"ruleId":"81","severity":1,"message":"82","line":2,"column":9,"nodeType":"83","messageId":"84","endLine":2,"endColumn":13},{"ruleId":"81","severity":1,"message":"85","line":2,"column":24,"nodeType":"83","messageId":"84","endLine":2,"endColumn":35},{"ruleId":"81","severity":1,"message":"86","line":7,"column":5,"nodeType":"83","messageId":"84","endLine":7,"endColumn":10},{"ruleId":"81","severity":1,"message":"87","line":7,"column":16,"nodeType":"83","messageId":"84","endLine":7,"endColumn":25},{"ruleId":"88","severity":1,"message":"89","line":46,"column":13,"nodeType":"90","endLine":46,"endColumn":39},{"ruleId":"81","severity":1,"message":"91","line":57,"column":10,"nodeType":"83","messageId":"84","endLine":57,"endColumn":15},{"ruleId":"81","severity":1,"message":"92","line":57,"column":17,"nodeType":"83","messageId":"84","endLine":57,"endColumn":25},{"ruleId":"93","severity":1,"message":"94","line":152,"column":46,"nodeType":"95","messageId":"96","endLine":152,"endColumn":48},{"ruleId":"93","severity":1,"message":"94","line":156,"column":46,"nodeType":"95","messageId":"96","endLine":156,"endColumn":48},{"ruleId":"81","severity":1,"message":"97","line":4,"column":30,"nodeType":"83","messageId":"84","endLine":4,"endColumn":36},{"ruleId":"81","severity":1,"message":"98","line":5,"column":9,"nodeType":"83","messageId":"84","endLine":5,"endColumn":16},{"ruleId":"93","severity":1,"message":"94","line":68,"column":36,"nodeType":"95","messageId":"96","endLine":68,"endColumn":38},{"ruleId":"88","severity":1,"message":"89","line":78,"column":50,"nodeType":"90","endLine":78,"endColumn":73},{"ruleId":"93","severity":1,"message":"94","line":79,"column":37,"nodeType":"95","messageId":"96","endLine":79,"endColumn":39},{"ruleId":"88","severity":1,"message":"89","line":79,"column":48,"nodeType":"90","endLine":83,"endColumn":29},{"ruleId":"88","severity":1,"message":"89","line":83,"column":46,"nodeType":"90","endLine":87,"endColumn":29},{"ruleId":"99","severity":1,"message":"100","line":88,"column":51,"nodeType":"101","messageId":"102","endLine":88,"endColumn":75},{"ruleId":"88","severity":1,"message":"89","line":91,"column":25,"nodeType":"90","endLine":126,"endColumn":29},{"ruleId":"93","severity":1,"message":"94","line":94,"column":42,"nodeType":"95","messageId":"96","endLine":94,"endColumn":44},{"ruleId":"93","severity":1,"message":"94","line":100,"column":56,"nodeType":"95","messageId":"96","endLine":100,"endColumn":58},{"ruleId":"93","severity":1,"message":"94","line":101,"column":48,"nodeType":"95","messageId":"96","endLine":101,"endColumn":50},{"ruleId":"93","severity":1,"message":"94","line":103,"column":48,"nodeType":"95","messageId":"96","endLine":103,"endColumn":50},{"ruleId":"93","severity":1,"message":"94","line":109,"column":58,"nodeType":"95","messageId":"96","endLine":109,"endColumn":60},{"ruleId":"93","severity":1,"message":"94","line":156,"column":42,"nodeType":"95","messageId":"96","endLine":156,"endColumn":44},{"ruleId":"93","severity":1,"message":"94","line":189,"column":83,"nodeType":"95","messageId":"96","endLine":189,"endColumn":85},{"ruleId":"93","severity":1,"message":"94","line":206,"column":73,"nodeType":"95","messageId":"96","endLine":206,"endColumn":75},{"ruleId":"88","severity":1,"message":"89","line":206,"column":83,"nodeType":"90","endLine":206,"endColumn":151},{"ruleId":"81","severity":1,"message":"103","line":3,"column":5,"nodeType":"83","messageId":"84","endLine":3,"endColumn":9},{"ruleId":"88","severity":1,"message":"89","line":10,"column":21,"nodeType":"90","endLine":12,"endColumn":25},{"ruleId":"88","severity":1,"message":"89","line":13,"column":21,"nodeType":"90","endLine":15,"endColumn":25},"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'useNavigate' is defined but never used.","'calls' is assigned a value but never used.","'responses' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","'modal' is assigned a value but never used.","'setModal' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useRef' is defined but never used.","'NavLink' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","'text' is defined but never used."]