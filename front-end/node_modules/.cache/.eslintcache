[{"/home/erin/WebstormProjects/CardMe/front-end/src/index.js":"1","/home/erin/WebstormProjects/CardMe/front-end/src/App.js":"2","/home/erin/WebstormProjects/CardMe/front-end/src/reportWebVitals.js":"3","/home/erin/WebstormProjects/CardMe/front-end/src/components/Homepage/index.js":"4","/home/erin/WebstormProjects/CardMe/front-end/src/components/Navbar/index.js":"5","/home/erin/WebstormProjects/CardMe/front-end/src/components/Create Game/index.js":"6","/home/erin/WebstormProjects/CardMe/front-end/src/components/Game/index.js":"7"},{"size":677,"mtime":1678325464992,"results":"8","hashOfConfig":"9"},{"size":740,"mtime":1678798559961,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1678143955839,"results":"11","hashOfConfig":"9"},{"size":1653,"mtime":1678818024517,"results":"12","hashOfConfig":"9"},{"size":1754,"mtime":1678802042405,"results":"13","hashOfConfig":"9"},{"size":6183,"mtime":1679093595073,"results":"14","hashOfConfig":"9"},{"size":8685,"mtime":1679094427918,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"qknta8",{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/erin/WebstormProjects/CardMe/front-end/src/index.js",[],[],"/home/erin/WebstormProjects/CardMe/front-end/src/App.js",[],[],"/home/erin/WebstormProjects/CardMe/front-end/src/reportWebVitals.js",[],[],"/home/erin/WebstormProjects/CardMe/front-end/src/components/Homepage/index.js",["40","41"],[],"import './index.scss';\nimport Navbar from '../Navbar';\nimport { io } from 'socket.io-client';\nimport { useState, useEffect } from \"react\";\nimport {NavLink} from \"react-router-dom\";\n\nconst socket = io();\nsocket.on('alert', (msg) => {\n    alert(msg);\n});\n\nsocket.on('redirect', (link) => {\n    window.location.href = link;\n});\n\nconst Homepage = () => {\n    const init = (\n        <div className={ 'game-options' }>\n            <NavLink to={ '/create-game' }>+ Create Game</NavLink>\n\n            <a onClick={\n                () => {\n                    const page = (\n                        <div className={ 'game-options' }>\n                            <form onSubmit={ (e) => {\n                                e.preventDefault();\n                                socket.emit('join-game', {\n                                    code: document.getElementById('join-code').value,\n                                    id: localStorage.getItem('id')\n                                });\n                            }}>\n                                <input type={ 'text' } placeholder={ 'Game Code' } id={ 'join-code' } />\n                                <input type={ 'submit' } value={ 'Go' } />\n                            </form>\n\n                            OR\n                            Join Public\n                        </div>\n                    );\n\n                    return setMain(page);\n                }\n            }>+ Join Game</a>\n        </div>\n    );\n\n    const [main, setMain] = useState(init);\n\n    return (\n        <div className={ 'home' }>\n            <Navbar />\n\n            { main }\n        </div>\n    );\n}\n\nexport default Homepage;","/home/erin/WebstormProjects/CardMe/front-end/src/components/Navbar/index.js",["42","43"],[],"import './index.scss';\nimport {Link, NavLink, useNavigate} from \"react-router-dom\";\nimport { useEffect, useState } from \"react\";\nimport { io } from \"socket.io-client\";\n\nconst socket = io();\nsocket.on('alert', (msg) => {\n    alert(msg);\n});\n\n\nconst Navbar = () => {\n\n    const [username, setUsername] = useState('Change Name');\n\n    useEffect( () => {\n        (async () => {\n            const getData = await fetch('/api/get-data', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    id: localStorage.getItem('id')\n                })\n            }).then((res) => res.json());\n\n            localStorage.setItem('id', getData.id);\n\n            socket.emit('online', {\n                username: getData.username,\n                id: getData.id\n            });\n\n            setUsername(getData.username);\n        })();\n    }, []);\n\n    return (\n        <section id={'nav'}>\n            <NavLink to={'/'} id={'logo'}>\n                Card Me Daddy\n            </NavLink>\n\n            <form className={'change-name'} onSubmit={ (e) => {\n                e.preventDefault();\n                const username = document.getElementById('username').value;\n                if(!username) return;\n\n                setUsername(username);\n                socket.emit('change-username', { id: localStorage.getItem('id'), username });\n                document.getElementById('username').value = '';\n            }}>\n                <input type={'text'} placeholder={ username } id={ 'username' } />\n                <input type={'submit'} value={'Change Name'}/>\n            </form>\n        </section>\n    );\n};\n\nexport default Navbar;","/home/erin/WebstormProjects/CardMe/front-end/src/components/Create Game/index.js",["44","45","46","47"],[],"import './index.scss';\nimport Navbar from '../Navbar';\nimport { io } from 'socket.io-client';\nimport { useState, useEffect } from \"react\";\nimport {NavLink} from \"react-router-dom\";\nimport {toBePartiallyChecked} from \"@testing-library/jest-dom/dist/matchers\";\n\nconst socket = io();\nsocket.on('alert', (msg) => {\n    alert(msg);\n});\n\nsocket.on('redirect', (link) => {\n    window.location.href = link;\n});\n\nconst Create = () => {\n    document.addEventListener('keyup', (e) => {\n        e.preventDefault();\n        if (e.key === 'ENTER') crHandler(e);\n    });\n\n    const init = (\n        <div>\n            Loading . . .\n        </div>\n    );\n\n    const crInit = (\n        <>\n            <form className={'settings'} onSubmit={(e) => e.preventDefault()}>\n                <label name={ 'blank' }><input type={ 'checkbox' }/>Add Blank Cards?</label>\n                <label name={ 'rounds' }>Enter number of rounds: <input type={'number'} value={'10'} /></label>\n                <label name={ 'timeout' }>If you want to disable player timeout, remove the number in this box. If you want to change how long the timeout is,\n                    this box takes a number in seconds. Default is 5 minutes. <input type={'number'} value={'300'} /></label>\n            </form>\n            <a className={ 'cr-add' }>\n                <input type={ 'text' } placeholder={'Custom CR Cast decks can be added with the deck code'} id={ 'cr-cast-input' } />\n                <input type={'submit'} onClick={ (e) => crHandler(e) } value={ 'Add CR Cast Deck' } id={ 'cr-cast-submit' } />\n            </a>\n            <h3>Added CR Packs</h3>\n        </>\n    );\n\n    const [packs, setPacks] = useState(init);\n    let [crPacks, setCR] = useState(crInit);\n\n    async function crHandler(e) {\n        e.preventDefault();\n        // https://api.crcast.cc/v1/cc/decks/\n        var id = document.getElementById('cr-cast-input').value;\n        if(!id) return alert('Please enter a CR Cast ID');\n\n        const pack = await fetch('/api/cr-cast', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                deck: id\n            })\n        }).then((res) => res.json());\n\n        if(pack.error > 1) return alert('Invalid pack, please check that you entered the right code.');\n\n        const packID = ( <label className={ 'pack-container' }>\n            <input type={ 'checkbox' } className={'cr'} value={ id } checked={true} onClick={(e) => {\n            e.target.checked ? e.target.checked = false : e.target.checked = true;\n        } } /> { pack.name }: { pack.description } </label>);\n        const add = (\n            <>\n                { crPacks }\n                { packID }\n            </>\n        );\n\n        crPacks = add;\n\n        setCR(add);\n    }\n\n    useEffect(() => {\n        (async () => {\n            //get cards https://www.restagainsthumanity.com/api/v2/cards?packs=\n            //get packs https://www.restagainsthumanity.com/api/v2/packs\n\n            const getPacks = await fetch('https://www.restagainsthumanity.com/api/v2/packs', {\n                method: 'GET'\n            }).then((res) => res.json());\n\n            setPacks(\n                (\n                    <div className={ 'column-wrapper' }>\n                        <p id={ 'pre-title' }>Premade Packs</p>\n                        <div id={ 'base-packs' }>\n                            { getPacks.map((p) => (\n                                    <label className={ 'pack-container' }>\n                                        <input type={ 'checkbox' } className={'cah'} value={ p.split(\" \").join(\"%20\").trim() } />\n                                        { p }\n                                    </label>\n                                )\n                            )}\n                        </div>\n                    </div>\n                )\n            );\n        })();\n    });\n\n    return (\n        <>\n            <Navbar />\n\n            <div className={ 'main' }>\n                <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\" />\n\n                <form id={ 'game-create' }>\n                    <div className={ 'row-wrapper' }>\n                        { packs }\n                        <div className={ 'column-wrapper' } id={ 'cr-cast-div' }>\n                            <h1> CR Cast <i className={ 'fa fa-question-circle' }>\n                                <p className={ 'hide-tip' }>CR Cast is a custom deck builder for cards against humanity. To import your deck, please copy the deck code (the url will not work) and\n                                paste into the field. <NavLink to={'https://cast.clrtd.com/'}>Visit CR Cast to make your deck today!</NavLink></p>\n                            </i></h1>\n                            { crPacks }\n                        </div>\n                    </div>\n\n                    <div id={ 'create-game-top' }>\n                        <input type={'text'} placeholder={ 'Password, if left blank game will be public' } />\n                        <input type={ 'submit' } value={ 'Start Game!' } onClick={ (e) => {\n                            e.preventDefault();\n\n                            const cah = [], cr =[];\n                            //let settings = document.querySelectorAll('.settings label');\n\n                            document.querySelectorAll('.cah').forEach((d) => {\n                                if(d.checked == true) cah.push(d.value);\n                            });\n\n                            document.querySelectorAll('.cr').forEach((d) => {\n                                if(d.checked == true) cr.push(d.value);\n                            });\n\n                            socket.emit('start-game',\n                                {\n                                    id: localStorage.getItem('id'),\n                                    cah,\n                                    cr\n                                })\n                        }\n                        } />\n                    </div>\n                </form>\n            </div>\n        </>\n    );\n}\n\nexport default Create;","/home/erin/WebstormProjects/CardMe/front-end/src/components/Game/index.js",["48","49","50","51","52","53","54","55","56","57","58","59","60","61"],[],{"ruleId":"62","severity":1,"message":"63","line":4,"column":20,"nodeType":"64","messageId":"65","endLine":4,"endColumn":29},{"ruleId":"66","severity":1,"message":"67","line":21,"column":13,"nodeType":"68","endLine":43,"endColumn":15},{"ruleId":"62","severity":1,"message":"69","line":2,"column":9,"nodeType":"64","messageId":"65","endLine":2,"endColumn":13},{"ruleId":"62","severity":1,"message":"70","line":2,"column":24,"nodeType":"64","messageId":"65","endLine":2,"endColumn":35},{"ruleId":"62","severity":1,"message":"71","line":6,"column":9,"nodeType":"64","messageId":"65","endLine":6,"endColumn":29},{"ruleId":"66","severity":1,"message":"67","line":37,"column":13,"nodeType":"68","endLine":37,"endColumn":39},{"ruleId":"72","severity":1,"message":"73","line":138,"column":46,"nodeType":"74","messageId":"75","endLine":138,"endColumn":48},{"ruleId":"72","severity":1,"message":"73","line":142,"column":46,"nodeType":"74","messageId":"75","endLine":142,"endColumn":48},{"ruleId":"62","severity":1,"message":"76","line":5,"column":9,"nodeType":"64","messageId":"65","endLine":5,"endColumn":16},{"ruleId":"72","severity":1,"message":"73","line":65,"column":36,"nodeType":"74","messageId":"75","endLine":65,"endColumn":38},{"ruleId":"66","severity":1,"message":"67","line":75,"column":50,"nodeType":"68","endLine":75,"endColumn":73},{"ruleId":"72","severity":1,"message":"73","line":76,"column":37,"nodeType":"74","messageId":"75","endLine":76,"endColumn":39},{"ruleId":"66","severity":1,"message":"67","line":76,"column":48,"nodeType":"68","endLine":80,"endColumn":29},{"ruleId":"66","severity":1,"message":"67","line":80,"column":46,"nodeType":"68","endLine":84,"endColumn":29},{"ruleId":"77","severity":1,"message":"78","line":85,"column":51,"nodeType":"79","messageId":"80","endLine":85,"endColumn":75},{"ruleId":"66","severity":1,"message":"67","line":88,"column":25,"nodeType":"68","endLine":101,"endColumn":29},{"ruleId":"72","severity":1,"message":"73","line":91,"column":42,"nodeType":"74","messageId":"75","endLine":91,"endColumn":44},{"ruleId":"72","severity":1,"message":"73","line":106,"column":73,"nodeType":"74","messageId":"75","endLine":106,"endColumn":75},{"ruleId":"72","severity":1,"message":"73","line":120,"column":73,"nodeType":"74","messageId":"75","endLine":120,"endColumn":75},{"ruleId":"72","severity":1,"message":"73","line":130,"column":42,"nodeType":"74","messageId":"75","endLine":130,"endColumn":44},{"ruleId":"72","severity":1,"message":"73","line":133,"column":85,"nodeType":"74","messageId":"75","endLine":133,"endColumn":87},{"ruleId":"72","severity":1,"message":"73","line":147,"column":85,"nodeType":"74","messageId":"75","endLine":147,"endColumn":87},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","'Link' is defined but never used.","'useNavigate' is defined but never used.","'toBePartiallyChecked' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'NavLink' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps"]