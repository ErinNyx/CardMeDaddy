[{"/home/erin/WebstormProjects/CardMe/front-end/src/index.js":"1","/home/erin/WebstormProjects/CardMe/front-end/src/App.js":"2","/home/erin/WebstormProjects/CardMe/front-end/src/reportWebVitals.js":"3","/home/erin/WebstormProjects/CardMe/front-end/src/components/Homepage/index.js":"4","/home/erin/WebstormProjects/CardMe/front-end/src/components/Navbar/index.js":"5","/home/erin/WebstormProjects/CardMe/front-end/src/components/Create Game/index.js":"6","/home/erin/WebstormProjects/CardMe/front-end/src/components/Game/index.js":"7","/home/erin/WebstormProjects/CardMe/front-end/src/components/Modal/index.js":"8","/home/erin/WebstormProjects/CardMe/front-end/src/components/Join Game/index.js":"9"},{"size":677,"mtime":1679371023836,"results":"10","hashOfConfig":"11"},{"size":1363,"mtime":1679371755058,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":1678143955839,"results":"13","hashOfConfig":"11"},{"size":991,"mtime":1679371169833,"results":"14","hashOfConfig":"11"},{"size":2085,"mtime":1679371169845,"results":"15","hashOfConfig":"11"},{"size":6971,"mtime":1679422045652,"results":"16","hashOfConfig":"11"},{"size":11126,"mtime":1679419505424,"results":"17","hashOfConfig":"11"},{"size":527,"mtime":1679321863196,"results":"18","hashOfConfig":"11"},{"size":2125,"mtime":1679371169853,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"qknta8",{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/erin/WebstormProjects/CardMe/front-end/src/index.js",[],[],"/home/erin/WebstormProjects/CardMe/front-end/src/App.js",[],[],"/home/erin/WebstormProjects/CardMe/front-end/src/reportWebVitals.js",[],[],"/home/erin/WebstormProjects/CardMe/front-end/src/components/Homepage/index.js",[],[],"/home/erin/WebstormProjects/CardMe/front-end/src/components/Navbar/index.js",["50","51"],[],"import './index.scss';\nimport {Link, NavLink, useNavigate} from \"react-router-dom\";\nimport { useEffect, useState } from \"react\";\nimport { io } from \"socket.io-client\";\n\nconst socket = io();\nsocket.on('alert', (msg) => {\n    alert(msg);\n});\n\n\nconst Navbar = () => {\n\n    const [username, setUsername] = useState('Change Name');\n\n    useEffect( () => {\n        (async () => {\n            localStorage.setItem('loading', true);\n            const getData = await fetch('/api/get-data', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    id: localStorage.getItem('id')\n                })\n            }).then((res) => res.json());\n\n            localStorage.setItem('id', getData.id);\n\n            socket.emit('online', {\n                username: getData.username,\n                id: getData.id\n            });\n            localStorage.setItem('loading', false);\n            window.dispatchEvent(new Event('storage'));\n            setUsername(getData.username);\n        })();\n    }, []);\n\n    return (\n        <section id={'nav'}>\n            <NavLink to={'/'} id={'logo'}>\n                Card Me Daddy\n            </NavLink>\n            <NavLink to={'https://ko-fi.com/erinargo'} target=\"_blank\" rel=\"noopener noreferrer\"><i className=\"fa fa-coffee\" id={ 'coffee' } aria-hidden=\"true\" /></NavLink>\n\n            <form className={'change-name'} onSubmit={ (e) => {\n                e.preventDefault();\n                const username = document.getElementById('username').value;\n                if(!username) return;\n\n                setUsername(username);\n                socket.emit('change-username', { id: localStorage.getItem('id'), username });\n                document.getElementById('username').value = '';\n            }}>\n                <input type={'text'} placeholder={ username } id={ 'username' } />\n                <input type={'submit'} value={'Change Name'}/>\n            </form>\n        </section>\n    );\n};\n\nexport default Navbar;","/home/erin/WebstormProjects/CardMe/front-end/src/components/Create Game/index.js",["52","53","54","55","56","57","58"],[],"/home/erin/WebstormProjects/CardMe/front-end/src/components/Game/index.js",["59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76"],[],"import './index.scss';\nimport Navbar from '../Navbar';\nimport { io } from 'socket.io-client';\nimport {useState, useEffect, useRef} from \"react\";\nimport {NavLink} from \"react-router-dom\";\n\nvar selected;\n\nconst socket = io();\nsocket.on('alert', (msg) => {\n    alert(msg);\n});\n\nsocket.on('redirect', (link) => {\n    window.location.href = link;\n});\n\nsocket.on('add-player', () => {});\nsocket.on('store', (data) => localStorage.setItem(data.key, data.token));\n\nsocket.on('selections', (data) => {\n    selected = data;\n});\n\nsocket.on('remove-response', () => {\n    selected = undefined;\n\n    document.querySelectorAll('.checked').forEach((c) => {\n        c.childNodes[1].checked = false;\n        c.target.parentElement.style.background = '';\n        c.classList.remove('.checked');\n        c.parentElement.value = undefined;\n    })\n});\n\nsocket.on('remove-data', () => {\n    localStorage.removeItem('cah-packs');\n    localStorage.removeItem('cr-packs');\n    localStorage.removeItem('join');\n})\n\nconst Game = () => {\n    const init = (\n        <>\n            Loading . . .\n        </>\n    );\n\n    const [game, setGame] = useState(init);\n\n    const kickPlayer = (p, user) => {\n        socket.emit('kick', { p, user });\n    }\n\n    useEffect(() => {\n        (async () => {\n            const gameID = window.location.href.split('/');\n            const user = localStorage.getItem('id');\n            socket.emit('game-connection', ({ game: gameID[gameID.length - 1] }));\n\n            const game = await fetch('/api/game-info', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    game: gameID[gameID.length - 1],\n                    player: user\n                })\n            }).then((res) => res.json());\n\n            if(game.status) return alert(game.msg);\n\n            const host = game.host == localStorage.getItem('id') ? <button onClick={() => socket.emit('launch-game', {\n                    code: game.code,\n                    user\n                })\n            }>Start!</button> :\n                <></>;\n\n            const page = game.started ? (\n                <>\n                    <div className={'wrapper-top'}>\n                        <div className={ 'xar' }><a className={'daddy'}>Daddy:</a> { game.czarName }</div>\n                        { game.host == user ? (<a className={ 'end' } onClick={ async () => {\n                            const end = prompt('If you really want to end your game, type END');\n\n                            socket.emit('end', { end, user });\n                        } }>End Game</a>) : (<a className={ 'end' } onClick={ async () => {\n                            const end = prompt('If you really want to leave your game, type END');\n\n                            socket.emit('end', { end, user });\n                        } }>Leave Game</a>) }\n                        <div className={ 'call' } className={'black-card'}>{ <p> { game.cards.calls[0].text.split(\"_\").join(\"＿＿\") } </p> } {\n                            <p className={'pick'}>Pick: { game.cards.calls[0].pick }</p>\n                        }</div>\n                        <a className={'confirm'} onClick={ async () => {\n                            let selected = [];\n\n                            if(game.czar == user && game.picking) {\n                                return socket.emit('round-winner', { winner: document.querySelectorAll('.selected .checked')[0].attributes.name.value, user });\n                            }\n                            let blanks = 0;\n\n                            document.querySelectorAll('.checked div').forEach(c => {\n                                var text = c.innerHTML == '_' ? prompt('Enter your text for card #'+ (c.parentElement.value + 1)) : c.innerHTML;\n                                if(c.innerHTML == '_' && !text) return;\n\n                                if(c.innerHTML == '_') blanks++;\n\n                                c.checked = false;\n                                c.classList.remove('checked');\n                                c.background = '';\n\n                                if(c.parentElement.value == undefined) {\n                                    selected = [];\n                                    return;\n                                }\n\n                                const card = {\n                                    order: c.parentElement.value,\n                                    text\n                                }\n\n                                selected.push(card);\n\n                                c.parentElement.value = undefined;\n                            });\n\n                            socket.emit('confirm-selection', { selected, user, blanks });\n                            selected = [];\n                        } }>Confirm Selection</a>\n\n                        <div className={'selected'}>\n                            { selected ? selected.selections.map((s) => (\n                                <label className={ 'white-card' } name={ s.id }>{ s.selected.map((c, i) => <>Card { i+1 }: { c.text }<input type={'checkbox'} onChange={ (e) => {\n                                    e.target.checked ?\n                                        e.target.parentElement.style.background = '#ff8352'\n                                        : e.target.parentElement.style.background = '';\n\n                                const checked = document.querySelectorAll('.checked');\n                                if(checked.length >= game.cards.calls[0].pick) {\n                                    document.querySelectorAll('.checked')[0]\n                                        .style.background = '';\n                                    document.querySelectorAll('.checked input')[0].checked = false;\n                                    document.querySelectorAll('.checked div')[0].parentElement.value = undefined;\n                                    document.querySelectorAll('.checked')[0].classList.remove('checked');\n                                }\n\n                                e.target.checked ? e.target.parentElement.value = undefined : e.target.parentElement.value = checked.length;\n\n                                e.target.checked ?\n                                    e.target.parentElement.classList.add('checked') :\n                                    e.target.parentElement.classList.remove('checked');\n                            } } /></>) }</label>)) : (<></>) }\n                        </div>\n\n                        <div className={ 'responses' }>\n                            {\n                            game.players\n                                .map((p) => (\n                                    p.id == user ? (<>{\n                                        p.hand\n                                        .map((r) => (<label className={'white-card'}><div>{ r.text }</div><input type={'checkbox'} onChange={ (e) => {\n                                            e.target.checked ?\n                                                e.target.parentElement.style.background = '#ff8352'\n                                                : e.target.parentElement.style.background = '';\n\n                                            const checked = document.querySelectorAll('.checked');\n                                            if(checked.length >= game.cards.calls[0].pick) {\n                                                document.querySelectorAll('.checked')[0]\n                                                    .style.background = '';\n                                                document.querySelectorAll('.checked input')[0].checked = false;\n                                                document.querySelectorAll('.checked div')[0].parentElement.value = undefined;\n                                                document.querySelectorAll('.checked')[0].classList.remove('checked');\n                                            }\n\n                                            e.target.parentElement.value ? e.target.parentElement.value = undefined : e.target.parentElement.value = checked.length;\n\n                                            e.target.checked ?\n                                                e.target.parentElement.classList.add('checked') :\n                                                e.target.parentElement.classList.remove('checked');\n                                        } } /></label>))\n                                    }</>) : (<></>)\n                                ))\n                        }</div>\n                    </div>\n                    <div className={'wrapper-bottom'}>\n                        <div className={ 'chat' }>\n                            <div className={'chat-box'}>\n                                <div>\n                                    {\n                                        game.messages.map((m) =>\n                                            (<div><p>\n                                                { game.players.filter((p) => p.id == m.user)[0].username }\n                                            </p>\n                                                <p> { m.msg } </p>\n                                            </div>)) }</div>\n                            </div>\n                            <form onSubmit={(e) => {\n                                e.preventDefault();\n                                const msg = document.getElementById('chat').value;\n                                const parseCode = window.location.href.split('/');\n                                socket.emit('chat', { msg, game: parseCode[parseCode.length - 1], user: localStorage.getItem('id') });\n                            }\n                            }>\n                                <input type={'text'} placeholder={'Chat'} id={'chat'} />\n                            </form>\n                        </div>\n                        <div className={ 'points' }>\n                            <p>Points:</p>\n                            { game.players.map((p) => (<><> { game.host == user ? <a className={ 'kick' } onClick={() => { kickPlayer(p.id, user) } }>Kick Player</a> : <></> } </>{ p.username }: { p.points }<br /></>)) }\n                        </div>\n                        <div className={ 'hand' }>\n\n                        </div>\n                    </div>\n                </>\n            ) : (\n                <>\n                    <div className={ 'row-wrapper' } id={ 'pregame-screen' }>\n                        Join Game Code: { game.code }<br /><br />\n                        Waiting on players . . . <br />\n                        {\n                            game.players\n                                .map((p) => (<> { p.username } </>))\n                                .reduce((prev, curr) => [prev, ', ', curr])\n                        }\n                    </div>\n                    { host }\n                </>\n            );\n\n            setGame(page);\n        })();\n    })\n\n    return (\n        <>\n            <Navbar />\n\n            { game }\n        </>\n    );\n}\n\nexport default Game;","/home/erin/WebstormProjects/CardMe/front-end/src/components/Modal/index.js",["77","78","79"],[],"import './index.scss';\n\nvar text;\nconst Modal = ({ data }) => {\n    return (\n        <div className={ 'modal-bg' }>\n            <div className={ 'modal' }>\n                <p> { data } </p>\n                <span>\n                    <a onClick={ () => {\n                        return true;\n                    } }>Okay</a>\n                    <a onClick={ () => {\n                        return false;\n                    } }>Cancel</a>\n                </span>\n            </div>\n        </div>\n    );\n}\n\nexport default Modal;","/home/erin/WebstormProjects/CardMe/front-end/src/components/Join Game/index.js",[],[],{"ruleId":"80","severity":1,"message":"81","line":2,"column":9,"nodeType":"82","messageId":"83","endLine":2,"endColumn":13},{"ruleId":"80","severity":1,"message":"84","line":2,"column":24,"nodeType":"82","messageId":"83","endLine":2,"endColumn":35},{"ruleId":"80","severity":1,"message":"85","line":7,"column":5,"nodeType":"82","messageId":"83","endLine":7,"endColumn":10},{"ruleId":"80","severity":1,"message":"86","line":7,"column":16,"nodeType":"82","messageId":"83","endLine":7,"endColumn":25},{"ruleId":"87","severity":1,"message":"88","line":52,"column":13,"nodeType":"89","endLine":52,"endColumn":39},{"ruleId":"80","severity":1,"message":"90","line":66,"column":10,"nodeType":"82","messageId":"83","endLine":66,"endColumn":15},{"ruleId":"80","severity":1,"message":"91","line":66,"column":17,"nodeType":"82","messageId":"83","endLine":66,"endColumn":25},{"ruleId":"92","severity":1,"message":"93","line":161,"column":46,"nodeType":"94","messageId":"95","endLine":161,"endColumn":48},{"ruleId":"92","severity":1,"message":"93","line":165,"column":46,"nodeType":"94","messageId":"95","endLine":165,"endColumn":48},{"ruleId":"80","severity":1,"message":"96","line":4,"column":30,"nodeType":"82","messageId":"83","endLine":4,"endColumn":36},{"ruleId":"80","severity":1,"message":"97","line":5,"column":9,"nodeType":"82","messageId":"83","endLine":5,"endColumn":16},{"ruleId":"92","severity":1,"message":"93","line":74,"column":36,"nodeType":"94","messageId":"95","endLine":74,"endColumn":38},{"ruleId":"87","severity":1,"message":"88","line":84,"column":50,"nodeType":"89","endLine":84,"endColumn":73},{"ruleId":"92","severity":1,"message":"93","line":85,"column":37,"nodeType":"94","messageId":"95","endLine":85,"endColumn":39},{"ruleId":"87","severity":1,"message":"88","line":85,"column":48,"nodeType":"89","endLine":89,"endColumn":29},{"ruleId":"87","severity":1,"message":"88","line":89,"column":46,"nodeType":"89","endLine":93,"endColumn":29},{"ruleId":"98","severity":1,"message":"99","line":94,"column":51,"nodeType":"100","messageId":"101","endLine":94,"endColumn":75},{"ruleId":"87","severity":1,"message":"88","line":97,"column":25,"nodeType":"89","endLine":132,"endColumn":29},{"ruleId":"92","severity":1,"message":"93","line":100,"column":42,"nodeType":"94","messageId":"95","endLine":100,"endColumn":44},{"ruleId":"92","severity":1,"message":"93","line":106,"column":56,"nodeType":"94","messageId":"95","endLine":106,"endColumn":58},{"ruleId":"92","severity":1,"message":"93","line":107,"column":48,"nodeType":"94","messageId":"95","endLine":107,"endColumn":50},{"ruleId":"92","severity":1,"message":"93","line":109,"column":48,"nodeType":"94","messageId":"95","endLine":109,"endColumn":50},{"ruleId":"92","severity":1,"message":"93","line":115,"column":58,"nodeType":"94","messageId":"95","endLine":115,"endColumn":60},{"ruleId":"92","severity":1,"message":"93","line":162,"column":42,"nodeType":"94","messageId":"95","endLine":162,"endColumn":44},{"ruleId":"92","severity":1,"message":"93","line":195,"column":83,"nodeType":"94","messageId":"95","endLine":195,"endColumn":85},{"ruleId":"92","severity":1,"message":"93","line":212,"column":73,"nodeType":"94","messageId":"95","endLine":212,"endColumn":75},{"ruleId":"87","severity":1,"message":"88","line":212,"column":83,"nodeType":"89","endLine":212,"endColumn":151},{"ruleId":"80","severity":1,"message":"102","line":3,"column":5,"nodeType":"82","messageId":"83","endLine":3,"endColumn":9},{"ruleId":"87","severity":1,"message":"88","line":10,"column":21,"nodeType":"89","endLine":12,"endColumn":25},{"ruleId":"87","severity":1,"message":"88","line":13,"column":21,"nodeType":"89","endLine":15,"endColumn":25},"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'useNavigate' is defined but never used.","'calls' is assigned a value but never used.","'responses' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","'modal' is assigned a value but never used.","'setModal' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useRef' is defined but never used.","'NavLink' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","'text' is defined but never used."]